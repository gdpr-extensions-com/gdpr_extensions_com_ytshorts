/*!
 * 2Click-Iframe-Privacy v0.3.1
 * https://github.com/01-Scripts/2Click-Iframe-Privacy
 *
 * Licensed MIT © 2018-2023 Michael Lorer - https://www.01-scripts.de/
 */



var _2ClickIframePrivacy = new function() {

  var consentCookieName = 'GDPR_Extensions_2ClickCookieConsent';

  // Initialize consent statuses:
  var consentStatuses = getConsentStatuses();

  var config = {
    enableCookies: true,
    useSessionCookie: true,
    cookieNamespace: '_2ClickIPEnable-',
    showContentLabel: 'Inhalt anzeigen',
    rememberChoiceLabel: 'Auswahl merken',
    privacyPolicyLabel: 'Datenschutzerklärung',
    privacyPolicyUrl: false
  };

  this.types = new Array(
    {
      type: 'video',
      description: 'Zum Aktivieren des Videos bitte auf den Link klicken. Durch das Aktivieren von eingebetteten Videos werden Daten an den jeweiligen Anbieter übermittelt. Weitere Informationen können unserer Datenschutzerklärung entnommen werden.<br />'
    },
    {
      type: 'map',
      description: 'Zum Aktivieren der eingebetteten Karte bitte auf den Link klicken. Durch das Aktivieren werden Daten an den jeweiligen Anbieter übermittelt. Weitere Informationen können unserer Datenschutzerklärung entnommen werden.<br />'
    },
    {
      type: 'calendar',
      description: 'Zum Aktivieren des eingebetteten Kalenders bitte auf den Link klicken. Durch das Aktivieren werden Daten an den jeweiligen Anbieter übermittelt. Weitere Informationen können unserer Datenschutzerklärung entnommen werden.<br />'
    }
  );

  function setConsentStatus(service, status) {
    consentStatuses[service] = status;
    var d = new Date;
    d.setTime(d.getTime() + 24*60*60*1000*30);
    document.cookie = consentCookieName + "=" + JSON.stringify(consentStatuses) + ";path=/;expires=" + d.toGMTString();
  }

  function getConsentStatuses() {
    var v = document.cookie.match('(^|;) ?' + consentCookieName + '=([^;]*)(;|$)');
    return v ? JSON.parse(v[2]) : {};
  }

  // Create <div>-element within the respective iframe to display the defined data-security message and get consent for loading the iframe content.
  function wrap(el, wrapper, type, text) {
    el.parentNode.insertBefore(wrapper, el);
    wrapper.className = 'privacy-msg privacy-'+type+'-msg';
    wrapper.style.width = el.clientWidth+'px';
    wrapper.style.height = el.clientHeight+'px';
    wrapper.innerHTML = text +'<a href="#foo" onclick="_2ClickIframePrivacy.EnableContent(\''+ type +'\'); return false;">'+config.showContentLabel+'</a>';
    if(config.enableCookies){
      wrapper.innerHTML = wrapper.innerHTML + '<br /><label><input type="checkbox" name="remind-\''+ type +'\'" /> '+config.rememberChoiceLabel+'</label>';
    }
    if(config.privacyPolicyUrl){
      wrapper.innerHTML = wrapper.innerHTML + '<br /><a href="'+config.privacyPolicyUrl+'">'+config.privacyPolicyLabel+'</a>';
    }
    wrapper.innerHTML = '<p>' + wrapper.innerHTML + '</p>';
    wrapper.appendChild(el);
  }

  this.EnableContent = function (type){
    var i;

    // Cookies globally enabled by config?
    var checkboxes = document.querySelectorAll('div.privacy-'+type+'-msg input');

    if(config.enableCookies){
      for (let i = 0; i < checkboxes.length; i++) {
        if(checkboxes[i].checked == true){
          let service = checkboxes[i].parentNode.parentNode.nextElementSibling.getAttribute('data-2click-service'); // get service name from iframe
          setConsentStatus(service, '1');
        }
      }
    }


    var x = document.querySelectorAll('div.privacy-'+type+'-msg p');
    for (i = 0; i < x.length; i++) {
      x[i].parentNode.removeChild(x[i]);
    }

    x = document.querySelectorAll('div.privacy-'+type+'-msg');
    for (i = 0; i < x.length; i++) {
      var parent = x[i].parentNode;

      // Move all children out of the element
      while (x[i].firstChild) parent.insertBefore(x[i].firstChild, x[i]);

      // Remove the empty element
      parent.removeChild(x[i]);
    }

    x = document.querySelectorAll('iframe[data-2click-service="'+type+'"]');
    for (i = 0; i < x.length; i++) {
      x[i].src = x[i].getAttribute("data-src");
    }

    // If available, execute the callback that is defined for the currently active type
    for (i = 0; i < this.types.length; i++) {
      if(this.types[i].type == type && this.types[i].callback) {
        window[this.types[i].callback]();
      }
    }
  }

  this.init = function (Userconfig) {
    // Read UserConfiguration:
    if (typeof Userconfig.enableCookies !== 'undefined') {
      config.enableCookies = Userconfig.enableCookies;
    }
    if (typeof Userconfig.useSessionCookie !== 'undefined') {
      config.useSessionCookie = Userconfig.useSessionCookie;
    }
    if (typeof Userconfig.cookieNamespace !== 'undefined') {
      config.cookieNamespace = Userconfig.cookieNamespace;
    }
    if (typeof Userconfig.privacyPolicyUrl !== 'undefined') {
      config.privacyPolicyUrl = Userconfig.privacyPolicyUrl;
    }
    if (typeof Userconfig.showContentLabel !== 'undefined') {
      config.showContentLabel = Userconfig.showContentLabel;
    }
    if (typeof Userconfig.rememberChoiceLabel !== 'undefined') {
      config.rememberChoiceLabel = Userconfig.rememberChoiceLabel;
    }
    if (typeof Userconfig.privacyPolicyLabel !== 'undefined') {
      config.privacyPolicyLabel = Userconfig.privacyPolicyLabel;
    }

    if (Array.isArray(Userconfig.CustomTypes)) {
      this.types = Userconfig.CustomTypes;
    }

    for (let i = 0; i < this.types.length; i++) {

      var selector = document.querySelectorAll('iframe[data-2click-type="'+this.types[i].type+'"]');

      for (let x = 0; x < selector.length; x++) {
        let service = selector[x].getAttribute('data-2click-service'); // get service name from iframe
        // debugger;
        if(consentStatuses[service] !== '1'){
          wrap(selector[x], document.createElement('div'), service, this.types[i].description);
        } else {
          selector[x].src = selector[x].getAttribute("data-src");
        }
      }

    }

  };
}
